import { isBoxed } from './boxing';
import { deepEquals, isEmpty } from './util';
/**
 * This function determines if a value is a form state.
 */
export function isFormState(state) {
    return !!state && state.hasOwnProperty('id') && state.hasOwnProperty('value') && state.hasOwnProperty('errors');
}
/**
 * This function determines if a value is an array state.
 */
export function isArrayState(state) {
    return isFormState(state) && state.hasOwnProperty('controls') && Array.isArray(state.controls);
}
/**
 * This function determines if a value is a group state.
 */
export function isGroupState(state) {
    return isFormState(state) && state.hasOwnProperty('controls') && !Array.isArray(state.controls) && typeof state.controls !== 'function';
}
export function createChildState(id, childValue) {
    if (isBoxed(childValue)) {
        return createFormControlState(id, childValue);
    }
    if (childValue !== null && Array.isArray(childValue)) {
        return createFormArrayState(id, childValue);
    }
    if (childValue !== null && typeof childValue === 'object') {
        return createFormGroupState(id, childValue);
    }
    return createFormControlState(id, childValue);
}
export function verifyFormControlValueIsValid(value) {
    if (value === null || ['string', 'number', 'boolean', 'undefined'].indexOf(typeof value) >= 0) {
        return value;
    }
    if (!isBoxed(value)) {
        const errorMsg = 'Form control states only support undefined, null, string, number, and boolean values as well as boxed values';
        throw new Error(`${errorMsg}; got ${JSON.stringify(value)} of type ${typeof value}`); // `;
    }
    if (value.value === null || ['string', 'number', 'boolean', 'undefined'].indexOf(typeof value.value) >= 0) {
        return value;
    }
    const serialized = JSON.stringify(value);
    const deserialized = JSON.parse(serialized);
    if (deepEquals(value, deserialized, { treatUndefinedAndMissingKeyAsSame: true })) {
        return value;
    }
    throw new Error(`A form control value must be serializable (i.e. value === JSON.parse(JSON.stringify(value))), got: ${JSON.stringify(value)}`);
}
/**
 * This function creates a form control state with an ID and a value.
 */
export function createFormControlState(id, value) {
    return {
        id,
        value: verifyFormControlValueIsValid(value),
        errors: {},
        pendingValidations: [],
        isValidationPending: false,
        isValid: true,
        isInvalid: false,
        isEnabled: true,
        isDisabled: false,
        isDirty: false,
        isPristine: true,
        isTouched: false,
        isUntouched: true,
        isSubmitted: false,
        isUnsubmitted: true,
        isFocused: false,
        isUnfocused: true,
        userDefinedProperties: {},
    };
}
export function getFormGroupValue(controls, originalValue) {
    let hasChanged = Object.keys(originalValue).length !== Object.keys(controls).length;
    const newValue = Object.keys(controls).reduce((res, key) => {
        const control = controls[key];
        hasChanged = hasChanged || originalValue[key] !== control.value;
        res[key] = control.value;
        return res;
    }, {});
    return hasChanged ? newValue : originalValue;
}
export function getFormGroupErrors(controls, originalErrors) {
    let hasChanged = false;
    const groupErrors = Object.keys(originalErrors)
        .filter(key => !key.startsWith('_'))
        .reduce((res, key) => Object.assign(res, { [key]: originalErrors[key] }), {});
    const newErrors = Object.keys(controls).reduce((res, key) => {
        const control = controls[key];
        const controlErrors = control.errors;
        if (!isEmpty(controlErrors)) {
            hasChanged = hasChanged || originalErrors[`_${key}`] !== controlErrors;
            Object.assign(res, { [`_${key}`]: control.errors });
        }
        else {
            hasChanged = hasChanged || originalErrors.hasOwnProperty(`_${key}`);
        }
        return res;
    }, groupErrors);
    hasChanged = hasChanged || Object.keys(originalErrors).length !== Object.keys(newErrors).length;
    return hasChanged ? newErrors : originalErrors;
}
export function computeGroupState(id, controls, value, errors, pendingValidations, userDefinedProperties, flags) {
    value = getFormGroupValue(controls, value);
    errors = getFormGroupErrors(controls, errors);
    const isValid = isEmpty(errors);
    const isDirty = flags.wasOrShouldBeDirty || Object.keys(controls).some(key => controls[key].isDirty);
    const isEnabled = flags.wasOrShouldBeEnabled || Object.keys(controls).some(key => controls[key].isEnabled);
    const isTouched = flags.wasOrShouldBeTouched || Object.keys(controls).some(key => controls[key].isTouched);
    const isSubmitted = flags.wasOrShouldBeSubmitted || Object.keys(controls).some(key => controls[key].isSubmitted);
    const isValidationPending = pendingValidations.length > 0 || Object.keys(controls).some(key => controls[key].isValidationPending);
    return {
        id,
        value,
        errors,
        pendingValidations,
        isValidationPending,
        isValid,
        isInvalid: !isValid,
        isEnabled,
        isDisabled: !isEnabled,
        isDirty,
        isPristine: !isDirty,
        isTouched,
        isUntouched: !isTouched,
        isSubmitted,
        isUnsubmitted: !isSubmitted,
        userDefinedProperties,
        controls,
    };
}
/**
 * This function creates a form group state with an ID and a value.
 * From the value the shape of the group state is inferred, i.e.
 * object properties are inferred as form groups, array properties
 * are inferred as form arrays, and primitive properties are inferred
 * as form controls.
 */
export function createFormGroupState(id, initialValue) {
    const controls = Object.keys(initialValue)
        .map((key) => [key, createChildState(`${id}.${key}`, initialValue[key])])
        .reduce((res, [controlId, state]) => Object.assign(res, { [controlId]: state }), {});
    return computeGroupState(id, controls, initialValue, {}, [], {}, { wasOrShouldBeEnabled: true });
}
function getFormArrayValue(controls, originalValue) {
    let hasChanged = Object.keys(originalValue).length !== Object.keys(controls).length;
    const newValue = controls.map((state, i) => {
        hasChanged = hasChanged || originalValue[i] !== state.value;
        return state.value;
    });
    return hasChanged ? newValue : originalValue;
}
function getFormArrayErrors(controls, originalErrors) {
    let hasChanged = false;
    const groupErrors = Object.keys(originalErrors)
        .filter(key => !key.startsWith('_'))
        .reduce((res, key) => Object.assign(res, { [key]: originalErrors[key] }), {});
    const newErrors = controls.reduce((res, state, i) => {
        const controlErrors = state.errors;
        if (!isEmpty(controlErrors)) {
            hasChanged = hasChanged || originalErrors[`_${i}`] !== controlErrors;
            Object.assign(res, { [`_${i}`]: controlErrors });
        }
        else {
            hasChanged = hasChanged || originalErrors.hasOwnProperty(`_${i}`);
        }
        return res;
    }, groupErrors);
    hasChanged = hasChanged || Object.keys(originalErrors).length !== Object.keys(newErrors).length;
    return hasChanged ? newErrors : originalErrors;
}
export function computeArrayState(id, inferredControls, value, errors, pendingValidations, userDefinedProperties, flags) {
    const controls = inferredControls;
    value = getFormArrayValue(controls, value);
    errors = getFormArrayErrors(controls, errors);
    const isValid = isEmpty(errors);
    const isDirty = flags.wasOrShouldBeDirty || controls.some(state => state.isDirty);
    const isEnabled = flags.wasOrShouldBeEnabled || controls.some(state => state.isEnabled);
    const isTouched = flags.wasOrShouldBeTouched || controls.some(state => state.isTouched);
    const isSubmitted = flags.wasOrShouldBeSubmitted || controls.some(state => state.isSubmitted);
    const isValidationPending = pendingValidations.length > 0 || controls.some(state => state.isValidationPending);
    return {
        id,
        value,
        errors,
        pendingValidations,
        isValidationPending,
        isValid,
        isInvalid: !isValid,
        isEnabled,
        isDisabled: !isEnabled,
        isDirty,
        isPristine: !isDirty,
        isTouched,
        isUntouched: !isTouched,
        isSubmitted,
        isUnsubmitted: !isSubmitted,
        userDefinedProperties,
        controls: inferredControls,
    };
}
/**
 * This function creates a form array state with an ID and a value.
 * From the value the shape of the array state is inferred, i.e.
 * object values are inferred as form groups, array values
 * are inferred as form arrays, and primitive values are inferred
 * as form controls.
 */
export function createFormArrayState(id, initialValue) {
    const controls = initialValue
        .map((value, i) => createChildState(`${id}.${i}`, value));
    return computeArrayState(id, controls, initialValue, {}, [], {}, { wasOrShouldBeEnabled: true });
}
//# sourceMappingURL=data:application/json;base64,