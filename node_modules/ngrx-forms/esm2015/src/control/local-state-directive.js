import { DOCUMENT } from '@angular/common';
import { Directive, EventEmitter, Inject, Optional, Output, Self, } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { NGRX_FORM_VIEW_ADAPTER } from '../view-adapter/view-adapter';
import { NgrxFormControlDirective } from './directive';
import * as i0 from "@angular/core";
export class NgrxLocalFormControlDirective extends NgrxFormControlDirective {
    constructor(el, dom, viewAdapters, valueAccessors) {
        super(el, dom, null, viewAdapters, valueAccessors);
        this.ngrxFormsAction = new EventEmitter();
    }
    dispatchAction(action) {
        this.ngrxFormsAction.emit(action);
    }
}
NgrxLocalFormControlDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0, type: NgrxLocalFormControlDirective, deps: [{ token: i0.ElementRef }, { token: DOCUMENT, optional: true }, { token: NGRX_FORM_VIEW_ADAPTER, optional: true, self: true }, { token: NG_VALUE_ACCESSOR, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Directive });
NgrxLocalFormControlDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.13", type: NgrxLocalFormControlDirective, selector: "[ngrxFormControlState][ngrxFormsAction]", outputs: { ngrxFormsAction: "ngrxFormsAction" }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0, type: NgrxLocalFormControlDirective, decorators: [{
            type: Directive,
            args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: '[ngrxFormControlState][ngrxFormsAction]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: undefined, decorators: [{
                    type: Self
                }, {
                    type: Optional
                }, {
                    type: Inject,
                    args: [NGRX_FORM_VIEW_ADAPTER]
                }] }, { type: undefined, decorators: [{
                    type: Self
                }, {
                    type: Optional
                }, {
                    type: Inject,
                    args: [NG_VALUE_ACCESSOR]
                }] }]; }, propDecorators: { ngrxFormsAction: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWwtc3RhdGUtZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbnRyb2wvbG9jYWwtc3RhdGUtZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQ0wsU0FBUyxFQUVULFlBQVksRUFDWixNQUFNLEVBQ04sUUFBUSxFQUNSLE1BQU0sRUFDTixJQUFJLEdBQ0wsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUF3QixpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBR3pFLE9BQU8sRUFBbUIsc0JBQXNCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN2RixPQUFPLEVBQVksd0JBQXdCLEVBQTRCLE1BQU0sYUFBYSxDQUFDOztBQU0zRixNQUFNLE9BQU8sNkJBQ1gsU0FBUSx3QkFBaUQ7SUFJekQsWUFDRSxFQUFjLEVBQ2dCLEdBQW9CLEVBQ0UsWUFBK0IsRUFDcEMsY0FBc0M7UUFFckYsS0FBSyxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxjQUFjLENBQUMsQ0FBQztRQVIzQyxvQkFBZSxHQUFHLElBQUksWUFBWSxFQUFrRCxDQUFDO0lBUy9GLENBQUM7SUFFUyxjQUFjLENBQUMsTUFBc0Q7UUFDN0UsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDcEMsQ0FBQzs7MkhBaEJVLDZCQUE2Qiw0Q0FPbEIsUUFBUSw2QkFDQSxzQkFBc0IseUNBQ3RCLGlCQUFpQjsrR0FUcEMsNkJBQTZCOzRGQUE3Qiw2QkFBNkI7a0JBSnpDLFNBQVM7bUJBQUM7b0JBQ1QsOENBQThDO29CQUM5QyxRQUFRLEVBQUUseUNBQXlDO2lCQUNwRDs7MEJBUUksUUFBUTs7MEJBQUksTUFBTTsyQkFBQyxRQUFROzswQkFDM0IsSUFBSTs7MEJBQUksUUFBUTs7MEJBQUksTUFBTTsyQkFBQyxzQkFBc0I7OzBCQUNqRCxJQUFJOzswQkFBSSxRQUFROzswQkFBSSxNQUFNOzJCQUFDLGlCQUFpQjs0Q0FOckMsZUFBZTtzQkFBeEIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHtcclxuICBEaXJlY3RpdmUsXHJcbiAgRWxlbWVudFJlZixcclxuICBFdmVudEVtaXR0ZXIsXHJcbiAgSW5qZWN0LFxyXG4gIE9wdGlvbmFsLFxyXG4gIE91dHB1dCxcclxuICBTZWxmLFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciwgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcblxyXG5pbXBvcnQgeyBBY3Rpb25zIH0gZnJvbSAnLi4vYWN0aW9ucyc7XHJcbmltcG9ydCB7IEZvcm1WaWV3QWRhcHRlciwgTkdSWF9GT1JNX1ZJRVdfQURBUFRFUiB9IGZyb20gJy4uL3ZpZXctYWRhcHRlci92aWV3LWFkYXB0ZXInO1xyXG5pbXBvcnQgeyBEb2N1bWVudCwgTmdyeEZvcm1Db250cm9sRGlyZWN0aXZlLCBOZ3J4Rm9ybUNvbnRyb2xWYWx1ZVR5cGUgfSBmcm9tICcuL2RpcmVjdGl2ZSc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLXNlbGVjdG9yXHJcbiAgc2VsZWN0b3I6ICdbbmdyeEZvcm1Db250cm9sU3RhdGVdW25ncnhGb3Jtc0FjdGlvbl0nLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdyeExvY2FsRm9ybUNvbnRyb2xEaXJlY3RpdmU8VFN0YXRlVmFsdWUsIFRWaWV3VmFsdWUgPSBUU3RhdGVWYWx1ZT5cclxuICBleHRlbmRzIE5ncnhGb3JtQ29udHJvbERpcmVjdGl2ZTxUU3RhdGVWYWx1ZSwgVFZpZXdWYWx1ZT4ge1xyXG5cclxuICBAT3V0cHV0KCkgbmdyeEZvcm1zQWN0aW9uID0gbmV3IEV2ZW50RW1pdHRlcjxBY3Rpb25zPE5ncnhGb3JtQ29udHJvbFZhbHVlVHlwZTxUU3RhdGVWYWx1ZT4+PigpO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIGVsOiBFbGVtZW50UmVmLFxyXG4gICAgQE9wdGlvbmFsKCkgQEluamVjdChET0NVTUVOVCkgZG9tOiBEb2N1bWVudCB8IG51bGwsXHJcbiAgICBAU2VsZigpIEBPcHRpb25hbCgpIEBJbmplY3QoTkdSWF9GT1JNX1ZJRVdfQURBUFRFUikgdmlld0FkYXB0ZXJzOiBGb3JtVmlld0FkYXB0ZXJbXSxcclxuICAgIEBTZWxmKCkgQE9wdGlvbmFsKCkgQEluamVjdChOR19WQUxVRV9BQ0NFU1NPUikgdmFsdWVBY2Nlc3NvcnM6IENvbnRyb2xWYWx1ZUFjY2Vzc29yW10sXHJcbiAgKSB7XHJcbiAgICBzdXBlcihlbCwgZG9tLCBudWxsLCB2aWV3QWRhcHRlcnMsIHZhbHVlQWNjZXNzb3JzKTtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBkaXNwYXRjaEFjdGlvbihhY3Rpb246IEFjdGlvbnM8TmdyeEZvcm1Db250cm9sVmFsdWVUeXBlPFRTdGF0ZVZhbHVlPj4pIHtcclxuICAgIHRoaXMubmdyeEZvcm1zQWN0aW9uLmVtaXQoYWN0aW9uKTtcclxuICB9XHJcbn1cclxuIl19