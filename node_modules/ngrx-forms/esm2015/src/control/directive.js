import { DOCUMENT } from '@angular/common';
import { Directive, HostBinding, HostListener, Inject, Input, Optional, Self, } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { ActionsSubject } from '@ngrx/store';
import { FocusAction, MarkAsDirtyAction, MarkAsTouchedAction, SetValueAction, UnfocusAction } from '../actions';
import { selectViewAdapter } from '../view-adapter/util';
import { NGRX_FORM_VIEW_ADAPTER } from '../view-adapter/view-adapter';
import { NgrxValueConverters } from './value-converter';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/store";
export var NGRX_UPDATE_ON_TYPE;
(function (NGRX_UPDATE_ON_TYPE) {
    NGRX_UPDATE_ON_TYPE["CHANGE"] = "change";
    NGRX_UPDATE_ON_TYPE["BLUR"] = "blur";
    NGRX_UPDATE_ON_TYPE["NEVER"] = "never";
})(NGRX_UPDATE_ON_TYPE || (NGRX_UPDATE_ON_TYPE = {}));
class ControlValueAccessorAdapter {
    constructor(valueAccessor) {
        this.valueAccessor = valueAccessor;
    }
    setViewValue(value) {
        this.valueAccessor.writeValue(value);
    }
    setOnChangeCallback(fn) {
        this.valueAccessor.registerOnChange(fn);
    }
    setOnTouchedCallback(fn) {
        this.valueAccessor.registerOnTouched(fn);
    }
    setIsDisabled(isDisabled) {
        if (this.valueAccessor.setDisabledState) {
            this.valueAccessor.setDisabledState(isDisabled);
        }
    }
}
export class NgrxFormControlDirective {
    constructor(el, 
    // for the dom parameter the `null` type must be last to ensure that in the compiled output
    // there is no reference to the Document type to support non-browser platforms
    dom, actionsSubject, viewAdapters, valueAccessors) {
        this.el = el;
        this.dom = dom;
        this.actionsSubject = actionsSubject;
        this.isInitialized = false;
        this.focusTrackingIsEnabled = false;
        this.ngrxUpdateOn = NGRX_UPDATE_ON_TYPE.CHANGE;
        this.ngrxValueConverter = NgrxValueConverters.default();
        viewAdapters = viewAdapters || [];
        valueAccessors = valueAccessors || [];
        if (valueAccessors.length > 1) {
            throw new Error('More than one custom control value accessor matches!');
        }
        this.viewAdapter = valueAccessors.length > 0
            ? new ControlValueAccessorAdapter(valueAccessors[0])
            : selectViewAdapter(viewAdapters);
    }
    set ngrxFormControlState(newState) {
        if (!newState) {
            throw new Error('The control state must not be undefined!');
        }
        const oldState = this.state;
        this.state = newState;
        if (this.isInitialized) {
            this.updateViewIfControlIdChanged(newState, oldState);
            this.updateViewIfValueChanged(newState, oldState);
            this.updateViewIfIsDisabledChanged(newState, oldState);
            this.updateViewIfIsFocusedChanged(newState, oldState);
        }
    }
    set ngrxEnableFocusTracking(value) {
        if (value && !this.dom) {
            throw new Error('focus tracking is only supported on the browser platform');
        }
        this.focusTrackingIsEnabled = value;
    }
    // TODO: move this into a separate directive
    // automatically apply the attribute that's used by the CDK to set initial focus
    get focusRegionStartAttr() {
        return this.state && this.state.isFocused ? '' : null;
    }
    updateViewIfControlIdChanged(newState, oldState) {
        if (oldState && newState.id === oldState.id) {
            return;
        }
        this.stateValue = newState.value;
        this.viewValue = this.ngrxValueConverter.convertStateToViewValue(this.stateValue);
        this.viewAdapter.setViewValue(this.viewValue);
        if (this.viewAdapter.setIsDisabled) {
            this.viewAdapter.setIsDisabled(newState.isDisabled);
        }
    }
    updateViewIfValueChanged(newState, _) {
        if (newState.value === this.stateValue) {
            return;
        }
        this.stateValue = newState.value;
        this.viewValue = this.ngrxValueConverter.convertStateToViewValue(newState.value);
        this.viewAdapter.setViewValue(this.viewValue);
    }
    updateViewIfIsDisabledChanged(newState, oldState) {
        if (!this.viewAdapter.setIsDisabled) {
            return;
        }
        if (oldState && newState.isDisabled === oldState.isDisabled) {
            return;
        }
        this.viewAdapter.setIsDisabled(newState.isDisabled);
    }
    updateViewIfIsFocusedChanged(newState, oldState) {
        if (!this.focusTrackingIsEnabled) {
            return;
        }
        if (oldState && newState.isFocused === oldState.isFocused) {
            return;
        }
        if (newState.isFocused) {
            this.el.nativeElement.focus();
        }
        else {
            this.el.nativeElement.blur();
        }
    }
    dispatchAction(action) {
        if (this.actionsSubject !== null) {
            this.actionsSubject.next(action);
        }
        else {
            throw new Error('ActionsSubject must be present in order to dispatch actions!');
        }
    }
    ngOnInit() {
        if (!this.state) {
            throw new Error('The form state must not be undefined!');
        }
        this.isInitialized = true;
        this.updateViewIfControlIdChanged(this.state, undefined);
        this.updateViewIfValueChanged(this.state, undefined);
        this.updateViewIfIsDisabledChanged(this.state, undefined);
        this.updateViewIfIsFocusedChanged(this.state, undefined);
        const dispatchMarkAsDirtyAction = () => {
            if (this.state.isPristine) {
                this.dispatchAction(new MarkAsDirtyAction(this.state.id));
            }
        };
        const dispatchSetValueAction = () => {
            this.stateValue = this.ngrxValueConverter.convertViewToStateValue(this.viewValue);
            if (this.stateValue !== this.state.value) {
                this.dispatchAction(new SetValueAction(this.state.id, this.stateValue));
                dispatchMarkAsDirtyAction();
            }
        };
        this.viewAdapter.setOnChangeCallback((viewValue) => {
            this.viewValue = viewValue;
            if (this.ngrxUpdateOn === NGRX_UPDATE_ON_TYPE.CHANGE) {
                dispatchSetValueAction();
            }
        });
        this.viewAdapter.setOnTouchedCallback(() => {
            if (!this.state.isTouched && this.ngrxUpdateOn !== NGRX_UPDATE_ON_TYPE.NEVER) {
                this.dispatchAction(new MarkAsTouchedAction(this.state.id));
            }
            if (this.ngrxUpdateOn === NGRX_UPDATE_ON_TYPE.BLUR) {
                dispatchSetValueAction();
            }
        });
    }
    ngAfterViewInit() {
        // we need to update the view again after it was initialized since some
        // controls depend on child elements for setting the value (e.g. selects)
        this.viewAdapter.setViewValue(this.viewValue);
        if (this.viewAdapter.setIsDisabled) {
            this.viewAdapter.setIsDisabled(this.state.isDisabled);
        }
    }
    onFocusChange() {
        if (!this.focusTrackingIsEnabled) {
            return;
        }
        const isControlFocused = this.el.nativeElement === this.dom.activeElement;
        if (isControlFocused !== this.state.isFocused) {
            this.dispatchAction(isControlFocused ? new FocusAction(this.state.id) : new UnfocusAction(this.state.id));
        }
    }
}
NgrxFormControlDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0, type: NgrxFormControlDirective, deps: [{ token: i0.ElementRef }, { token: DOCUMENT, optional: true }, { token: ActionsSubject, optional: true }, { token: NGRX_FORM_VIEW_ADAPTER, optional: true, self: true }, { token: NG_VALUE_ACCESSOR, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Directive });
NgrxFormControlDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.13", type: NgrxFormControlDirective, selector: ":not([ngrxFormsAction])[ngrxFormControlState]", inputs: { ngrxFormControlState: "ngrxFormControlState", ngrxUpdateOn: "ngrxUpdateOn", ngrxEnableFocusTracking: "ngrxEnableFocusTracking", ngrxValueConverter: "ngrxValueConverter" }, host: { listeners: { "focusin": "onFocusChange()", "focusout": "onFocusChange()" }, properties: { "attr.cdk-focus-region-start": "this.focusRegionStartAttr" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0, type: NgrxFormControlDirective, decorators: [{
            type: Directive,
            args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: ':not([ngrxFormsAction])[ngrxFormControlState]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i1.ActionsSubject, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ActionsSubject]
                }] }, { type: undefined, decorators: [{
                    type: Self
                }, {
                    type: Optional
                }, {
                    type: Inject,
                    args: [NGRX_FORM_VIEW_ADAPTER]
                }] }, { type: undefined, decorators: [{
                    type: Self
                }, {
                    type: Optional
                }, {
                    type: Inject,
                    args: [NG_VALUE_ACCESSOR]
                }] }]; }, propDecorators: { ngrxFormControlState: [{
                type: Input
            }], ngrxUpdateOn: [{
                type: Input
            }], ngrxEnableFocusTracking: [{
                type: Input
            }], ngrxValueConverter: [{
                type: Input
            }], focusRegionStartAttr: [{
                type: HostBinding,
                args: ['attr.cdk-focus-region-start']
            }], onFocusChange: [{
                type: HostListener,
                args: ['focusin']
            }, {
                type: HostListener,
                args: ['focusout']
            }] } });
//# sourceMappingURL=data:application/json;base64,