export * from './actions';
export { box, isBoxed, unbox } from './boxing';
export { isArrayState, isGroupState, createFormControlState, createFormGroupState, createFormArrayState, } from './state';
export { formControlReducer } from './control/reducer';
export { formGroupReducer } from './group/reducer';
export { formArrayReducer } from './array/reducer';
export { createFormStateReducerWithUpdate, formStateReducer, onNgrxForms, onNgrxFormsAction, wrapReducerWithFormStateUpdate, } from './reducer';
export * from './update-function/update-array';
export * from './update-function/update-group';
export * from './update-function/update-recursive';
export * from './update-function/set-value';
export * from './update-function/set-errors';
export * from './update-function/validate';
export * from './update-function/enable';
export * from './update-function/disable';
export * from './update-function/mark-as-dirty';
export * from './update-function/mark-as-pristine';
export * from './update-function/mark-as-touched';
export * from './update-function/mark-as-untouched';
export * from './update-function/mark-as-submitted';
export * from './update-function/mark-as-unsubmitted';
export * from './update-function/focus';
export * from './update-function/unfocus';
export * from './update-function/add-array-control';
export * from './update-function/add-group-control';
export * from './update-function/move-array-control';
export * from './update-function/swap-array-control';
export * from './update-function/remove-array-control';
export * from './update-function/remove-group-control';
export * from './update-function/set-user-defined-property';
export * from './update-function/reset';
export * from './update-function/start-async-validation';
export * from './update-function/set-async-error';
export * from './update-function/clear-async-error';
export { compose } from './update-function/util';
export { NGRX_FORM_VIEW_ADAPTER } from './view-adapter/view-adapter';
export { NgrxCheckboxViewAdapter } from './view-adapter/checkbox';
export { NgrxDefaultViewAdapter } from './view-adapter/default';
export { NgrxNumberViewAdapter } from './view-adapter/number';
export { NgrxFallbackSelectOption } from './view-adapter/option';
export { NgrxRadioViewAdapter } from './view-adapter/radio';
export { NgrxRangeViewAdapter } from './view-adapter/range';
export { NgrxSelectViewAdapter, NgrxSelectOption } from './view-adapter/select';
export { NgrxSelectMultipleViewAdapter, NgrxSelectMultipleOption } from './view-adapter/select-multiple';
export { NgrxFormControlDirective, NGRX_UPDATE_ON_TYPE } from './control/directive';
export { NgrxLocalFormControlDirective } from './control/local-state-directive';
export { NgrxFormDirective } from './group/directive';
export { NgrxLocalFormDirective } from './group/local-state-directive';
export { NgrxValueConverters } from './control/value-converter';
export { NGRX_STATUS_CLASS_NAMES, NgrxStatusCssClassesDirective } from './status-css-classes.directive';
export { NgrxFormsModule } from './module';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmdyeC1mb3Jtcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9uZ3J4LWZvcm1zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWMsV0FBVyxDQUFDO0FBQzFCLE9BQU8sRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBaUMsTUFBTSxVQUFVLENBQUM7QUFDOUUsT0FBTyxFQWFMLFlBQVksRUFDWixZQUFZLEVBQ1osc0JBQXNCLEVBQ3RCLG9CQUFvQixFQUNwQixvQkFBb0IsR0FDckIsTUFBTSxTQUFTLENBQUM7QUFFakIsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDdkQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDbkQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDbkQsT0FBTyxFQUdMLGdDQUFnQyxFQUNoQyxnQkFBZ0IsRUFDaEIsV0FBVyxFQUNYLGlCQUFpQixFQUNqQiw4QkFBOEIsR0FDL0IsTUFBTSxXQUFXLENBQUM7QUFFbkIsY0FBYyxnQ0FBZ0MsQ0FBQztBQUMvQyxjQUFjLGdDQUFnQyxDQUFDO0FBQy9DLGNBQWMsb0NBQW9DLENBQUM7QUFDbkQsY0FBYyw2QkFBNkIsQ0FBQztBQUM1QyxjQUFjLDhCQUE4QixDQUFDO0FBQzdDLGNBQWMsNEJBQTRCLENBQUM7QUFDM0MsY0FBYywwQkFBMEIsQ0FBQztBQUN6QyxjQUFjLDJCQUEyQixDQUFDO0FBQzFDLGNBQWMsaUNBQWlDLENBQUM7QUFDaEQsY0FBYyxvQ0FBb0MsQ0FBQztBQUNuRCxjQUFjLG1DQUFtQyxDQUFDO0FBQ2xELGNBQWMscUNBQXFDLENBQUM7QUFDcEQsY0FBYyxxQ0FBcUMsQ0FBQztBQUNwRCxjQUFjLHVDQUF1QyxDQUFDO0FBQ3RELGNBQWMseUJBQXlCLENBQUM7QUFDeEMsY0FBYywyQkFBMkIsQ0FBQztBQUMxQyxjQUFjLHFDQUFxQyxDQUFDO0FBQ3BELGNBQWMscUNBQXFDLENBQUM7QUFDcEQsY0FBYyxzQ0FBc0MsQ0FBQztBQUNyRCxjQUFjLHNDQUFzQyxDQUFDO0FBQ3JELGNBQWMsd0NBQXdDLENBQUM7QUFDdkQsY0FBYyx3Q0FBd0MsQ0FBQztBQUN2RCxjQUFjLDZDQUE2QyxDQUFDO0FBQzVELGNBQWMseUJBQXlCLENBQUM7QUFDeEMsY0FBYywwQ0FBMEMsQ0FBQztBQUN6RCxjQUFjLG1DQUFtQyxDQUFDO0FBQ2xELGNBQWMscUNBQXFDLENBQUM7QUFFcEQsT0FBTyxFQUFFLE9BQU8sRUFBeUIsTUFBTSx3QkFBd0IsQ0FBQztBQUV4RSxPQUFPLEVBQW1CLHNCQUFzQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDdEYsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDbEUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDaEUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDOUQsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDakUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDNUQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDNUQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLGdCQUFnQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDaEYsT0FBTyxFQUFFLDZCQUE2QixFQUFFLHdCQUF3QixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFFekcsT0FBTyxFQUFFLHdCQUF3QixFQUE0QixtQkFBbUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzlHLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBRXZFLE9BQU8sRUFBc0IsbUJBQW1CLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUVwRixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUV4RyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sVUFBVSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9hY3Rpb25zJztcclxuZXhwb3J0IHsgYm94LCBpc0JveGVkLCB1bmJveCwgQm94ZWQsIFVuYm94ZWQsIFVuYm94ZWRPYmplY3QgfSBmcm9tICcuL2JveGluZyc7XHJcbmV4cG9ydCB7XHJcbiAgRm9ybUNvbnRyb2xWYWx1ZVR5cGVzLFxyXG4gIE5ncnhGb3JtQ29udHJvbElkLFxyXG4gIFZhbGlkYXRpb25FcnJvcnMsXHJcbiAgS2V5VmFsdWUsXHJcbiAgQWJzdHJhY3RDb250cm9sU3RhdGUsXHJcbiAgRm9ybUNvbnRyb2xTdGF0ZSxcclxuICBGb3JtR3JvdXBDb250cm9scyxcclxuICBGb3JtR3JvdXBTdGF0ZSxcclxuICBGb3JtQXJyYXlTdGF0ZSxcclxuICBGb3JtU3RhdGUsXHJcbiAgSW5mZXJlbmNlV3JhcHBlcixcclxuICBJbmZlcnJlZEZvcm1TdGF0ZSxcclxuICBpc0FycmF5U3RhdGUsXHJcbiAgaXNHcm91cFN0YXRlLFxyXG4gIGNyZWF0ZUZvcm1Db250cm9sU3RhdGUsXHJcbiAgY3JlYXRlRm9ybUdyb3VwU3RhdGUsXHJcbiAgY3JlYXRlRm9ybUFycmF5U3RhdGUsXHJcbn0gZnJvbSAnLi9zdGF0ZSc7XHJcblxyXG5leHBvcnQgeyBmb3JtQ29udHJvbFJlZHVjZXIgfSBmcm9tICcuL2NvbnRyb2wvcmVkdWNlcic7XHJcbmV4cG9ydCB7IGZvcm1Hcm91cFJlZHVjZXIgfSBmcm9tICcuL2dyb3VwL3JlZHVjZXInO1xyXG5leHBvcnQgeyBmb3JtQXJyYXlSZWR1Y2VyIH0gZnJvbSAnLi9hcnJheS9yZWR1Y2VyJztcclxuZXhwb3J0IHtcclxuICBBY3Rpb25Db25zdHJ1Y3RvcixcclxuICBDcmVhdGVkQWN0aW9uLFxyXG4gIGNyZWF0ZUZvcm1TdGF0ZVJlZHVjZXJXaXRoVXBkYXRlLFxyXG4gIGZvcm1TdGF0ZVJlZHVjZXIsXHJcbiAgb25OZ3J4Rm9ybXMsXHJcbiAgb25OZ3J4Rm9ybXNBY3Rpb24sXHJcbiAgd3JhcFJlZHVjZXJXaXRoRm9ybVN0YXRlVXBkYXRlLFxyXG59IGZyb20gJy4vcmVkdWNlcic7XHJcblxyXG5leHBvcnQgKiBmcm9tICcuL3VwZGF0ZS1mdW5jdGlvbi91cGRhdGUtYXJyYXknO1xyXG5leHBvcnQgKiBmcm9tICcuL3VwZGF0ZS1mdW5jdGlvbi91cGRhdGUtZ3JvdXAnO1xyXG5leHBvcnQgKiBmcm9tICcuL3VwZGF0ZS1mdW5jdGlvbi91cGRhdGUtcmVjdXJzaXZlJztcclxuZXhwb3J0ICogZnJvbSAnLi91cGRhdGUtZnVuY3Rpb24vc2V0LXZhbHVlJztcclxuZXhwb3J0ICogZnJvbSAnLi91cGRhdGUtZnVuY3Rpb24vc2V0LWVycm9ycyc7XHJcbmV4cG9ydCAqIGZyb20gJy4vdXBkYXRlLWZ1bmN0aW9uL3ZhbGlkYXRlJztcclxuZXhwb3J0ICogZnJvbSAnLi91cGRhdGUtZnVuY3Rpb24vZW5hYmxlJztcclxuZXhwb3J0ICogZnJvbSAnLi91cGRhdGUtZnVuY3Rpb24vZGlzYWJsZSc7XHJcbmV4cG9ydCAqIGZyb20gJy4vdXBkYXRlLWZ1bmN0aW9uL21hcmstYXMtZGlydHknO1xyXG5leHBvcnQgKiBmcm9tICcuL3VwZGF0ZS1mdW5jdGlvbi9tYXJrLWFzLXByaXN0aW5lJztcclxuZXhwb3J0ICogZnJvbSAnLi91cGRhdGUtZnVuY3Rpb24vbWFyay1hcy10b3VjaGVkJztcclxuZXhwb3J0ICogZnJvbSAnLi91cGRhdGUtZnVuY3Rpb24vbWFyay1hcy11bnRvdWNoZWQnO1xyXG5leHBvcnQgKiBmcm9tICcuL3VwZGF0ZS1mdW5jdGlvbi9tYXJrLWFzLXN1Ym1pdHRlZCc7XHJcbmV4cG9ydCAqIGZyb20gJy4vdXBkYXRlLWZ1bmN0aW9uL21hcmstYXMtdW5zdWJtaXR0ZWQnO1xyXG5leHBvcnQgKiBmcm9tICcuL3VwZGF0ZS1mdW5jdGlvbi9mb2N1cyc7XHJcbmV4cG9ydCAqIGZyb20gJy4vdXBkYXRlLWZ1bmN0aW9uL3VuZm9jdXMnO1xyXG5leHBvcnQgKiBmcm9tICcuL3VwZGF0ZS1mdW5jdGlvbi9hZGQtYXJyYXktY29udHJvbCc7XHJcbmV4cG9ydCAqIGZyb20gJy4vdXBkYXRlLWZ1bmN0aW9uL2FkZC1ncm91cC1jb250cm9sJztcclxuZXhwb3J0ICogZnJvbSAnLi91cGRhdGUtZnVuY3Rpb24vbW92ZS1hcnJheS1jb250cm9sJztcclxuZXhwb3J0ICogZnJvbSAnLi91cGRhdGUtZnVuY3Rpb24vc3dhcC1hcnJheS1jb250cm9sJztcclxuZXhwb3J0ICogZnJvbSAnLi91cGRhdGUtZnVuY3Rpb24vcmVtb3ZlLWFycmF5LWNvbnRyb2wnO1xyXG5leHBvcnQgKiBmcm9tICcuL3VwZGF0ZS1mdW5jdGlvbi9yZW1vdmUtZ3JvdXAtY29udHJvbCc7XHJcbmV4cG9ydCAqIGZyb20gJy4vdXBkYXRlLWZ1bmN0aW9uL3NldC11c2VyLWRlZmluZWQtcHJvcGVydHknO1xyXG5leHBvcnQgKiBmcm9tICcuL3VwZGF0ZS1mdW5jdGlvbi9yZXNldCc7XHJcbmV4cG9ydCAqIGZyb20gJy4vdXBkYXRlLWZ1bmN0aW9uL3N0YXJ0LWFzeW5jLXZhbGlkYXRpb24nO1xyXG5leHBvcnQgKiBmcm9tICcuL3VwZGF0ZS1mdW5jdGlvbi9zZXQtYXN5bmMtZXJyb3InO1xyXG5leHBvcnQgKiBmcm9tICcuL3VwZGF0ZS1mdW5jdGlvbi9jbGVhci1hc3luYy1lcnJvcic7XHJcblxyXG5leHBvcnQgeyBjb21wb3NlLCBQcm9qZWN0Rm4sIFByb2plY3RGbjIgfSBmcm9tICcuL3VwZGF0ZS1mdW5jdGlvbi91dGlsJztcclxuXHJcbmV4cG9ydCB7IEZvcm1WaWV3QWRhcHRlciwgTkdSWF9GT1JNX1ZJRVdfQURBUFRFUiB9IGZyb20gJy4vdmlldy1hZGFwdGVyL3ZpZXctYWRhcHRlcic7XHJcbmV4cG9ydCB7IE5ncnhDaGVja2JveFZpZXdBZGFwdGVyIH0gZnJvbSAnLi92aWV3LWFkYXB0ZXIvY2hlY2tib3gnO1xyXG5leHBvcnQgeyBOZ3J4RGVmYXVsdFZpZXdBZGFwdGVyIH0gZnJvbSAnLi92aWV3LWFkYXB0ZXIvZGVmYXVsdCc7XHJcbmV4cG9ydCB7IE5ncnhOdW1iZXJWaWV3QWRhcHRlciB9IGZyb20gJy4vdmlldy1hZGFwdGVyL251bWJlcic7XHJcbmV4cG9ydCB7IE5ncnhGYWxsYmFja1NlbGVjdE9wdGlvbiB9IGZyb20gJy4vdmlldy1hZGFwdGVyL29wdGlvbic7XHJcbmV4cG9ydCB7IE5ncnhSYWRpb1ZpZXdBZGFwdGVyIH0gZnJvbSAnLi92aWV3LWFkYXB0ZXIvcmFkaW8nO1xyXG5leHBvcnQgeyBOZ3J4UmFuZ2VWaWV3QWRhcHRlciB9IGZyb20gJy4vdmlldy1hZGFwdGVyL3JhbmdlJztcclxuZXhwb3J0IHsgTmdyeFNlbGVjdFZpZXdBZGFwdGVyLCBOZ3J4U2VsZWN0T3B0aW9uIH0gZnJvbSAnLi92aWV3LWFkYXB0ZXIvc2VsZWN0JztcclxuZXhwb3J0IHsgTmdyeFNlbGVjdE11bHRpcGxlVmlld0FkYXB0ZXIsIE5ncnhTZWxlY3RNdWx0aXBsZU9wdGlvbiB9IGZyb20gJy4vdmlldy1hZGFwdGVyL3NlbGVjdC1tdWx0aXBsZSc7XHJcblxyXG5leHBvcnQgeyBOZ3J4Rm9ybUNvbnRyb2xEaXJlY3RpdmUsIE5ncnhGb3JtQ29udHJvbFZhbHVlVHlwZSwgTkdSWF9VUERBVEVfT05fVFlQRSB9IGZyb20gJy4vY29udHJvbC9kaXJlY3RpdmUnO1xyXG5leHBvcnQgeyBOZ3J4TG9jYWxGb3JtQ29udHJvbERpcmVjdGl2ZSB9IGZyb20gJy4vY29udHJvbC9sb2NhbC1zdGF0ZS1kaXJlY3RpdmUnO1xyXG5leHBvcnQgeyBOZ3J4Rm9ybURpcmVjdGl2ZSB9IGZyb20gJy4vZ3JvdXAvZGlyZWN0aXZlJztcclxuZXhwb3J0IHsgTmdyeExvY2FsRm9ybURpcmVjdGl2ZSB9IGZyb20gJy4vZ3JvdXAvbG9jYWwtc3RhdGUtZGlyZWN0aXZlJztcclxuXHJcbmV4cG9ydCB7IE5ncnhWYWx1ZUNvbnZlcnRlciwgTmdyeFZhbHVlQ29udmVydGVycyB9IGZyb20gJy4vY29udHJvbC92YWx1ZS1jb252ZXJ0ZXInO1xyXG5cclxuZXhwb3J0IHsgTkdSWF9TVEFUVVNfQ0xBU1NfTkFNRVMsIE5ncnhTdGF0dXNDc3NDbGFzc2VzRGlyZWN0aXZlIH0gZnJvbSAnLi9zdGF0dXMtY3NzLWNsYXNzZXMuZGlyZWN0aXZlJztcclxuXHJcbmV4cG9ydCB7IE5ncnhGb3Jtc01vZHVsZSB9IGZyb20gJy4vbW9kdWxlJztcclxuIl19