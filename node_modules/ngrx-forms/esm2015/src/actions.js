// NOTE: the explicit type declaration for the `TYPE` properties is required
// for the output declarations to properly use the literal string type instead
// of just `string`
export class SetValueAction {
    constructor(controlId, value) {
        this.controlId = controlId;
        this.value = value;
        this.type = SetValueAction.TYPE;
    }
}
SetValueAction.TYPE = 'ngrx/forms/SET_VALUE';
export class SetErrorsAction {
    constructor(controlId, errors) {
        this.controlId = controlId;
        this.errors = errors;
        this.type = SetErrorsAction.TYPE;
    }
}
SetErrorsAction.TYPE = 'ngrx/forms/SET_ERRORS';
export class SetAsyncErrorAction {
    constructor(controlId, name, value) {
        this.controlId = controlId;
        this.name = name;
        this.value = value;
        this.type = SetAsyncErrorAction.TYPE;
    }
}
SetAsyncErrorAction.TYPE = 'ngrx/forms/SET_ASYNC_ERROR';
export class ClearAsyncErrorAction {
    constructor(controlId, name) {
        this.controlId = controlId;
        this.name = name;
        this.type = ClearAsyncErrorAction.TYPE;
    }
}
ClearAsyncErrorAction.TYPE = 'ngrx/forms/CLEAR_ASYNC_ERROR';
export class StartAsyncValidationAction {
    constructor(controlId, name) {
        this.controlId = controlId;
        this.name = name;
        this.type = StartAsyncValidationAction.TYPE;
    }
}
StartAsyncValidationAction.TYPE = 'ngrx/forms/START_ASYNC_VALIDATION';
export class MarkAsDirtyAction {
    constructor(controlId) {
        this.controlId = controlId;
        this.type = MarkAsDirtyAction.TYPE;
    }
}
MarkAsDirtyAction.TYPE = 'ngrx/forms/MARK_AS_DIRTY';
export class MarkAsPristineAction {
    constructor(controlId) {
        this.controlId = controlId;
        this.type = MarkAsPristineAction.TYPE;
    }
}
MarkAsPristineAction.TYPE = 'ngrx/forms/MARK_AS_PRISTINE';
export class EnableAction {
    constructor(controlId) {
        this.controlId = controlId;
        this.type = EnableAction.TYPE;
    }
}
EnableAction.TYPE = 'ngrx/forms/ENABLE';
export class DisableAction {
    constructor(controlId) {
        this.controlId = controlId;
        this.type = DisableAction.TYPE;
    }
}
DisableAction.TYPE = 'ngrx/forms/DISABLE';
export class MarkAsTouchedAction {
    constructor(controlId) {
        this.controlId = controlId;
        this.type = MarkAsTouchedAction.TYPE;
    }
}
MarkAsTouchedAction.TYPE = 'ngrx/forms/MARK_AS_TOUCHED';
export class MarkAsUntouchedAction {
    constructor(controlId) {
        this.controlId = controlId;
        this.type = MarkAsUntouchedAction.TYPE;
    }
}
MarkAsUntouchedAction.TYPE = 'ngrx/forms/MARK_AS_UNTOUCHED';
export class FocusAction {
    constructor(controlId) {
        this.controlId = controlId;
        this.type = FocusAction.TYPE;
    }
}
FocusAction.TYPE = 'ngrx/forms/FOCUS';
export class UnfocusAction {
    constructor(controlId) {
        this.controlId = controlId;
        this.type = UnfocusAction.TYPE;
    }
}
UnfocusAction.TYPE = 'ngrx/forms/UNFOCUS';
export class MarkAsSubmittedAction {
    constructor(controlId) {
        this.controlId = controlId;
        this.type = MarkAsSubmittedAction.TYPE;
    }
}
MarkAsSubmittedAction.TYPE = 'ngrx/forms/MARK_AS_SUBMITTED';
export class MarkAsUnsubmittedAction {
    constructor(controlId) {
        this.controlId = controlId;
        this.type = MarkAsUnsubmittedAction.TYPE;
    }
}
MarkAsUnsubmittedAction.TYPE = 'ngrx/forms/MARK_AS_UNSUBMITTED';
export class AddArrayControlAction {
    constructor(controlId, value, index) {
        this.controlId = controlId;
        this.value = value;
        this.index = index;
        this.type = AddArrayControlAction.TYPE;
    }
}
AddArrayControlAction.TYPE = 'ngrx/forms/ADD_ARRAY_CONTROL';
export class AddGroupControlAction {
    constructor(controlId, name, value) {
        this.controlId = controlId;
        this.name = name;
        this.value = value;
        this.type = AddGroupControlAction.TYPE;
    }
}
AddGroupControlAction.TYPE = 'ngrx/forms/ADD_GROUP_CONTROL';
export class RemoveArrayControlAction {
    constructor(controlId, index) {
        this.controlId = controlId;
        this.index = index;
        this.type = RemoveArrayControlAction.TYPE;
    }
}
RemoveArrayControlAction.TYPE = 'ngrx/forms/REMOVE_ARRAY_CONTROL';
export class SwapArrayControlAction {
    constructor(controlId, fromIndex, toIndex) {
        this.controlId = controlId;
        this.fromIndex = fromIndex;
        this.toIndex = toIndex;
        this.type = SwapArrayControlAction.TYPE;
    }
}
SwapArrayControlAction.TYPE = 'ngrx/forms/SWAP_ARRAY_CONTROL';
export class MoveArrayControlAction {
    constructor(controlId, fromIndex, toIndex) {
        this.controlId = controlId;
        this.fromIndex = fromIndex;
        this.toIndex = toIndex;
        this.type = MoveArrayControlAction.TYPE;
    }
}
MoveArrayControlAction.TYPE = 'ngrx/forms/MOVE_ARRAY_CONTROL';
export class RemoveGroupControlAction {
    constructor(controlId, name) {
        this.controlId = controlId;
        this.name = name;
        this.type = RemoveGroupControlAction.TYPE;
    }
}
RemoveGroupControlAction.TYPE = 'ngrx/forms/REMOVE_CONTROL';
export class SetUserDefinedPropertyAction {
    constructor(controlId, name, value) {
        this.controlId = controlId;
        this.name = name;
        this.value = value;
        this.type = SetUserDefinedPropertyAction.TYPE;
    }
}
SetUserDefinedPropertyAction.TYPE = 'ngrx/forms/SET_USER_DEFINED_PROPERTY';
export class ResetAction {
    constructor(controlId) {
        this.controlId = controlId;
        this.type = ResetAction.TYPE;
    }
}
ResetAction.TYPE = 'ngrx/forms/RESET';
export function isNgrxFormsAction(action) {
    return !!action.type && action.type.startsWith('ngrx/forms/');
}
export const ALL_NGRX_FORMS_ACTION_TYPES = [
    SetValueAction.TYPE,
    SetErrorsAction.TYPE,
    SetAsyncErrorAction.TYPE,
    ClearAsyncErrorAction.TYPE,
    StartAsyncValidationAction.TYPE,
    MarkAsDirtyAction.TYPE,
    MarkAsPristineAction.TYPE,
    EnableAction.TYPE,
    DisableAction.TYPE,
    MarkAsTouchedAction.TYPE,
    MarkAsUntouchedAction.TYPE,
    FocusAction.TYPE,
    UnfocusAction.TYPE,
    MarkAsSubmittedAction.TYPE,
    MarkAsUnsubmittedAction.TYPE,
    AddGroupControlAction.TYPE,
    RemoveGroupControlAction.TYPE,
    AddArrayControlAction.TYPE,
    RemoveArrayControlAction.TYPE,
    SetUserDefinedPropertyAction.TYPE,
    ResetAction.TYPE,
    SwapArrayControlAction.TYPE,
    MoveArrayControlAction.TYPE,
];
//# sourceMappingURL=data:application/json;base64,