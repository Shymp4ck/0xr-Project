import { computeGroupState, isGroupState } from '../state';
import { ensureState } from './util';
function updateGroupControlsState(updateFns) {
    return (state) => {
        let hasChanged = false;
        const newControls = Object.keys(state.controls).reduce((res, key) => {
            const control = state.controls[key];
            Object.assign(res, { [key]: control });
            if (updateFns.hasOwnProperty(key)) {
                const newControl = updateFns[key](control, state);
                hasChanged = hasChanged || newControl !== control;
                Object.assign(res, { [key]: newControl });
            }
            return res;
        }, {});
        return hasChanged ? newControls : state.controls;
    };
}
function updateGroupSingle(updateFns) {
    return (state) => {
        const newControls = updateGroupControlsState(updateFns)(state);
        return newControls !== state.controls
            ? computeGroupState(state.id, newControls, state.value, state.errors, state.pendingValidations, state.userDefinedProperties, {
                wasOrShouldBeDirty: state.isDirty,
                wasOrShouldBeEnabled: state.isEnabled,
                wasOrShouldBeTouched: state.isTouched,
                wasOrShouldBeSubmitted: state.isSubmitted,
            })
            : state;
    };
}
export function updateGroup(stateOrUpdateFnOrUpdateFnArray, updateFnOrUpdateFnArr, ...rest) {
    if (isGroupState(stateOrUpdateFnOrUpdateFnArray)) {
        const updateFnArr = Array.isArray(updateFnOrUpdateFnArr) ? updateFnOrUpdateFnArr : [updateFnOrUpdateFnArr];
        return updateFnArr.concat(...rest).reduce((s, updateFn) => updateGroupSingle(updateFn)(s), stateOrUpdateFnOrUpdateFnArray);
    }
    let updateFnArr = Array.isArray(stateOrUpdateFnOrUpdateFnArray) ? stateOrUpdateFnOrUpdateFnArray : [stateOrUpdateFnOrUpdateFnArray];
    updateFnArr = updateFnOrUpdateFnArr === undefined ? updateFnArr : updateFnArr.concat(updateFnOrUpdateFnArr);
    return (s) => updateGroup(ensureState(s), updateFnArr.concat(rest));
}
//# sourceMappingURL=data:application/json;base64,